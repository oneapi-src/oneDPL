##===----------------------------------------------------------------------===##
#
# Copyright (C) Intel Corporation
#
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# This file incorporates work covered by the following copyright and permission
# notice:
#
# Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
#
##===----------------------------------------------------------------------===##

# Installation path: <onedpl_root>/lib/cmake/oneDPL/
get_filename_component(_onedpl_root "${CMAKE_CURRENT_LIST_DIR}" REALPATH)
get_filename_component(_onedpl_root "${_onedpl_root}/../../../" ABSOLUTE)
@HANDLE_HEADERS_PATH@
if (EXISTS "${_onedpl_headers}")
    if (NOT TARGET oneDPL)
        if (CMAKE_CXX_COMPILER MATCHES ".*(dpcpp-cl|icx-cl|icx)(.exe)?$")
            set(INTEL_LLVM_COMPILER_MSVC_LIKE TRUE)
        elseif(CMAKE_CXX_COMPILER MATCHES ".*(dpcpp|icpx)(.exe)?$")
            set(INTEL_LLVM_COMPILER_GNU_LIKE TRUE)
        endif()

        if (NOT INTELLLVM_WIN_TOOLCHAIN_APPLIED AND CMAKE_HOST_WIN32 AND (INTEL_LLVM_COMPILER_MSVC_LIKE OR INTEL_LLVM_COMPILER_GNU_LIKE) )
            message(WARNING "On Windows, ${CMAKE_CXX_COMPILER} requires some workarounds to function properly with CMake. We recommend using the provided toolchain file by adding '-DCMAKE_TOOLCHAIN_FILE=windows-IntelLLVM-toolchain.cmake' to enable these workarounds.")
        endif()

        if (INTELLLVM_WIN_GNULIKE_WARNING)
            message(WARNING "On Windows, ${CMAKE_CXX_COMPILER} is not supported by CMake (https://gitlab.kitware.com/cmake/cmake/-/issues/24314). A workaround is provided but may have limitations. We recommend using CMAKE_CXX_COMPILER=icx or icx-cl on Windows.")
        endif()

        if (INTELLLVM_WIN_MSVCLIKE_WARNING)
            message(WARNING "${CMAKE_CXX_COMPILER} requires changes to linker settings to allow proper usage with CMake ${CMAKE_VERSION} on Windows.  A workaround is provided but may have limitations. We recommend using CMake version 3.23.0 or newer on Windows")
        endif()

        # The following fixes are requested by windows-IntelLLVM-toolchain.cmake
        if (INTELLLVM_MSVC_WIN_STDOPTION_FIX)
            # Fix std compiler options for icx, icx-cl (Adapted from https://github.com/Kitware/CMake/commit/42ca6416afeabd445bc6c19749e68604c9c2d733)
            set(CMAKE_CXX14_STANDARD_COMPILE_OPTION  "-Qstd:c++14")
            set(CMAKE_CXX14_EXTENSION_COMPILE_OPTION "-Qstd:c++14")
            set(CMAKE_CXX17_STANDARD_COMPILE_OPTION  "-Qstd:c++17")
            set(CMAKE_CXX17_EXTENSION_COMPILE_OPTION "-Qstd:c++17")
            set(CMAKE_CXX20_STANDARD_COMPILE_OPTION  "-Qstd:c++20")
            set(CMAKE_CXX20_EXTENSION_COMPILE_OPTION "-Qstd:c++20")
        endif()

        if (INTELLLVM_MSVC_WIN_LINKORDER_FIX)
            # Fixing linker rule to use the compiler for linking and moving link options before /link
            # Adapted from fix in CMake 3.23: https://github.com/Kitware/CMake/commit/5d5a7123034361b6cacff96d3ed20d2bb78c33cc
            set(CMAKE_CXX_LINK_EXECUTABLE "<CMAKE_COMMAND> -E vs_link_exe --intdir=<OBJECT_DIR> --rc=<CMAKE_RC_COMPILER> --mt=<CMAKE_MT> --manifests <MANIFESTS> -- <CMAKE_CXX_COMPILER> /nologo <CMAKE_CXX_LINK_FLAGS> <OBJECTS> <LINK_FLAGS> <LINK_LIBRARIES> /link /out:<TARGET> /implib:<TARGET_IMPLIB> /pdb:<TARGET_PDB> /version:<TARGET_VERSION_MAJOR>.<TARGET_VERSION_MINOR>")
        endif()

        if (INTELLLVM_WIN_OFFICIAL_SUPPORT_FIX)
            # Intel provided workaround for CMake version 3.23+
            find_package(IntelDPCPP REQUIRED)
        endif()

        if (INTELLLVM_WIN_STD_IGNORE_FIX)
            include(Compiler/CMakeCommonCompilerMacros)
            # Setting c++ standard default to 14, and enabling usage of CMAKE_CXX_STANDARD
            __compiler_check_default_language_standard(CXX 2020 14)
        endif()


        include(CheckCXXCompilerFlag)

        add_library(oneDPL INTERFACE IMPORTED)
        set_target_properties(oneDPL PROPERTIES INTERFACE_INCLUDE_DIRECTORIES "${_onedpl_headers}")

        target_compile_features(oneDPL INTERFACE cxx_std_17)

        if (ONEDPL_PAR_BACKEND AND NOT ONEDPL_PAR_BACKEND MATCHES "^(tbb|openmp|serial)$")
            message(STATUS "oneDPL: ONEDPL_PAR_BACKEND=${ONEDPL_PAR_BACKEND} is requested, but not supported, available backends: tbb, openmp, serial")
            set(oneDPL_FOUND FALSE)
            return()
        endif()

        if (NOT ONEDPL_PAR_BACKEND OR ONEDPL_PAR_BACKEND STREQUAL "tbb")  # Handle oneTBB backend
            find_package(TBB 2021 QUIET COMPONENTS tbb)
            if (NOT TBB_FOUND AND ONEDPL_PAR_BACKEND STREQUAL "tbb")  # If oneTBB backend is requested explicitly, but not found.
                message(STATUS "oneDPL: ONEDPL_PAR_BACKEND=${ONEDPL_PAR_BACKEND} requested, but not found")
                set(oneDPL_FOUND FALSE)
                return()
            elseif (TBB_FOUND)
                set(ONEDPL_PAR_BACKEND tbb)
                message(STATUS "oneDPL: ONEDPL_PAR_BACKEND=${ONEDPL_PAR_BACKEND}, disable OpenMP backend")
                set_target_properties(oneDPL PROPERTIES INTERFACE_LINK_LIBRARIES TBB::tbb)
                set_property(TARGET oneDPL APPEND PROPERTY INTERFACE_COMPILE_DEFINITIONS ONEDPL_USE_TBB_BACKEND=1 ONEDPL_USE_OPENMP_BACKEND=0)
            endif()
        endif()

        if (NOT ONEDPL_PAR_BACKEND OR ONEDPL_PAR_BACKEND STREQUAL "openmp")  # Handle OpenMP backend
            if (UNIX)
                set(_openmp_flag "-fopenmp")
            else()
                set(_openmp_flag "-Qopenmp")
            endif()

            # Some compilers may fail if _openmp_flag is not in CMAKE_REQUIRED_LIBRARIES.
            set(_onedpl_saved_required_libs ${CMAKE_REQUIRED_LIBRARIES})
            set(CMAKE_REQUIRED_LIBRARIES ${_openmp_option})
            check_cxx_compiler_flag(${_openmp_flag} _openmp_option)
            set(CMAKE_REQUIRED_LIBRARIES ${_onedpl_saved_required_libs})
            unset(_onedpl_saved_required_libs)

            if (NOT _openmp_option AND ONEDPL_PAR_BACKEND STREQUAL "openmp")  # If OpenMP backend is requested explicitly, but not supported.
                message(STATUS "oneDPL: ONEDPL_PAR_BACKEND=${ONEDPL_PAR_BACKEND} requested, but not supported")
                set(oneDPL_FOUND FALSE)
                return()
            elseif (_openmp_option)
                set(ONEDPL_PAR_BACKEND openmp)
                message(STATUS "oneDPL: ONEDPL_PAR_BACKEND=${ONEDPL_PAR_BACKEND}, disable oneTBB backend")
                set_target_properties(oneDPL PROPERTIES INTERFACE_COMPILE_OPTIONS ${_openmp_flag})
                set_target_properties(oneDPL PROPERTIES INTERFACE_LINK_LIBRARIES ${_openmp_flag})
                set_property(TARGET oneDPL APPEND PROPERTY INTERFACE_COMPILE_DEFINITIONS ONEDPL_USE_TBB_BACKEND=0 ONEDPL_USE_OPENMP_BACKEND=1)
            endif()
        endif()

        if (NOT ONEDPL_PAR_BACKEND OR ONEDPL_PAR_BACKEND STREQUAL "serial")
            set(ONEDPL_PAR_BACKEND serial)
            message(STATUS "oneDPL: ONEDPL_PAR_BACKEND=${ONEDPL_PAR_BACKEND}, disable oneTBB and OpenMP backends")
            set_property(TARGET oneDPL APPEND PROPERTY INTERFACE_COMPILE_DEFINITIONS ONEDPL_USE_TBB_BACKEND=0 ONEDPL_USE_OPENMP_BACKEND=0)
        endif()

        check_cxx_compiler_flag("-fsycl" _fsycl_option)
        if (_fsycl_option)
            # Enable SYCL* with compilers/compiler drivers not passing -fsycl by default
            if (NOT CMAKE_CXX_COMPILER MATCHES ".*(dpcpp-cl|dpcpp)(.exe)?$")
                message(STATUS "Adding -fsycl compiler option")
                target_compile_options(oneDPL INTERFACE -fsycl)
                target_link_libraries(oneDPL INTERFACE -fsycl)
            endif()
        else()
            message(STATUS "oneDPL: -fsycl is not supported by current compiler, set ONEDPL_USE_DPCPP_BACKEND=0")
            set_property(TARGET oneDPL APPEND PROPERTY INTERFACE_COMPILE_DEFINITIONS ONEDPL_USE_DPCPP_BACKEND=0)
        endif()
    endif()
else()
    message(STATUS "oneDPL: headers do not exist ${_onedpl_headers}")
    set(oneDPL_FOUND FALSE)
endif()
