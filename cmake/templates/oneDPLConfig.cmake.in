##===----------------------------------------------------------------------===##
#
# Copyright (C) Intel Corporation
#
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# This file incorporates work covered by the following copyright and permission
# notice:
#
# Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
#
##===----------------------------------------------------------------------===##

# Installation path: <onedpl_root>/lib/cmake/oneDPL/
get_filename_component(_onedpl_root "${CMAKE_CURRENT_LIST_DIR}" REALPATH)
get_filename_component(_onedpl_root "${_onedpl_root}/../../../" ABSOLUTE)
@HANDLE_HEADERS_PATH@
if (EXISTS "${_onedpl_headers}")
    if (NOT TARGET oneDPL)
        include(CheckCXXCompilerFlag)

        add_library(oneDPL INTERFACE IMPORTED)
        set_target_properties(oneDPL PROPERTIES INTERFACE_INCLUDE_DIRECTORIES "${_onedpl_headers}")

        if (NOT DEFINED ONEDPL_BACKEND)
            message(STATUS "oneDPL: ONEDPL_BACKEND is not set, dpcpp and tbb backends will be enabled if available")
        elseif (ONEDPL_BACKEND MATCHES "^(tbb|omp|dpcpp)$")
            message(STATUS "oneDPL: ONEDPL_BACKEND=${ONEDPL_BACKEND} is requested")
        else()
            message(STATUS "oneDPL: ONEDPL_BACKEND=${ONEDPL_BACKEND} is requested, but not supproted, available backends: dpcpp, omp, tbb")
            set(oneDPL_FOUND FALSE)
            return()
        endif()

        if (ONEDPL_BACKEND STREQUAL "omp")  # Handle OpenMP backend
            if (UNIX)
                set(_openmp_flag "-fopenmp")
            else()
                set(_openmp_flag "-Qopenmp")
            endif()

            # Some compilers may fail if _openmp_flag is not in CMAKE_REQUIRED_LIBRARIES.
            set(_onedpl_saved_required_libs ${CMAKE_REQUIRED_LIBRARIES})
            set(CMAKE_REQUIRED_LIBRARIES ${_openmp_option})
            check_cxx_compiler_flag(${_openmp_flag} _openmp_option)
            set(CMAKE_REQUIRED_LIBRARIES ${_onedpl_saved_required_libs})
            unset(_onedpl_saved_required_libs)

            if (_openmp_option)
                set_target_properties(oneDPL PROPERTIES INTERFACE_COMPILE_OPTIONS ${_openmp_flag})
                set_target_properties(oneDPL PROPERTIES INTERFACE_LINK_LIBRARIES ${_openmp_flag})
                unset(_openmp_option)

                set_property(TARGET oneDPL APPEND PROPERTY INTERFACE_COMPILE_DEFINITIONS
                    ONEDPL_USE_TBB_BACKEND=0
                    ONEDPL_USE_DPCPP_BACKEND=0
                    ONEDPL_USE_OPENMP_BACKEND=1)
            else()
                message(STATUS "oneDPL: ONEDPL_BACKEND=${ONEDPL_BACKEND} is requested, but not supported (${_openmp_flag} is not supported by current compiler)")
                set(oneDPL_FOUND FALSE)
                return()
            endif()
        endif()

        if (NOT DEFINED ONEDPL_BACKEND OR ONEDPL_BACKEND STREQUAL "tbb")  # Handle oneTBB backend
            find_package(TBB 2021 QUIET COMPONENTS tbb)
            if (NOT TBB_FOUND)
                if (ONEDPL_BACKEND STREQUAL "tbb")
                    message(STATUS "oneDPL: ONEDPL_BACKEND=${ONEDPL_BACKEND} is requested, but not found (oneTBB is not found)")
                    set(oneDPL_FOUND FALSE)
                    return()
                else()
                    message(STATUS "oneDPL: oneTBB is not found, set ONEDPL_USE_TBB_BACKEND=0")
                    set_property(TARGET oneDPL APPEND PROPERTY INTERFACE_COMPILE_DEFINITIONS ONEDPL_USE_TBB_BACKEND=0)
                endif()
            else()
                if (ONEDPL_BACKEND STREQUAL "tbb")
                    set_property(TARGET oneDPL APPEND PROPERTY INTERFACE_COMPILE_DEFINITIONS ONEDPL_USE_DPCPP_BACKEND=0)
                endif()
                set_target_properties(oneDPL PROPERTIES INTERFACE_LINK_LIBRARIES TBB::tbb)
            endif()
        endif()

        if (NOT DEFINED ONEDPL_BACKEND OR ONEDPL_BACKEND STREQUAL "dpcpp")  # Handle DPC++ backend
            check_cxx_compiler_flag("-fsycl" _fsycl_option)
            if (NOT _fsycl_option)
                if (ONEDPL_BACKEND STREQUAL "dpcpp")
                    message(STATUS "oneDPL: ONEDPL_BACKEND=${ONEDPL_BACKEND} is requested, but not supported (-fsycl is not supported by current compiler)")
                    set(oneDPL_FOUND FALSE)
                    return()
                else()
                    message(STATUS "oneDPL: -fsycl is not supported by current compiler, set ONEDPL_USE_DPCPP_BACKEND=0")
                    set_property(TARGET oneDPL APPEND PROPERTY INTERFACE_COMPILE_DEFINITIONS ONEDPL_USE_DPCPP_BACKEND=0)
                endif()
            elseif (ONEDPL_BACKEND STREQUAL "dpcpp")
                set_property(TARGET oneDPL APPEND PROPERTY INTERFACE_COMPILE_DEFINITIONS ONEDPL_USE_TBB_BACKEND=0)
            endif()
        endif()
    endif()
else()
    message(STATUS "oneDPL: headers do not exist ${_onedpl_headers}")
    set(oneDPL_FOUND FALSE)
endif()
