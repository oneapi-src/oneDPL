// -*- C++ -*-
//===----------------------------------------------------------------------===//
//
// Copyright (C) Intel Corporation
//
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// This file incorporates work covered by the following copyright and permission
// notice:
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
//
//===----------------------------------------------------------------------===//

#ifndef __ONEDPL_complex
#define __ONEDPL_complex

#include "oneapi/dpl/internal/common_config.h"
#include <complex>

namespace oneapi
{
namespace dpl
{
template <class T>
T
abs(const dpl::complex<T>& z)
{
    return ::std::abs(z);
}

using ::std::arg;
using ::std::complex;
using ::std::conj;
using ::std::exp;
using ::std::imag;
using ::std::norm;
using ::std::polar;
using ::std::proj;
using ::std::real;

template <class T>
dpl::complex<T>
acos(const dpl::complex<T>& z)
{
    return ::std::acos(z);
}

template <class T>
dpl::complex<T>
acosh(const dpl::complex<T>& z)
{
    return ::std::acosh(z);
}

template <class T>
dpl::complex<T>
cos(const dpl::complex<T>& z)
{
    return ::std::cos(z);
}

template <class T>
dpl::complex<T>
pow(const dpl::complex<T>& x, const dpl::complex<T>& y)
{
    return ::std::pow(x, y);
}

template <class T>
dpl::complex<T>
pow(const dpl::complex<T>& x, const T& y)
{
    return ::std::pow(x, y);
}

template <class T>
dpl::complex<T>
pow(const T& x, const dpl::complex<T>& y)
{
    return ::std::pow(x, y);
}
} // namespace dpl
} // namespace oneapi

namespace dpl = oneapi::dpl;

#endif // __ONEDPL_complex
