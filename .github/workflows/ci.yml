name: oneDPL CI

on:
  push:
    branches: [main]
  pull_request:
    branches:
      - release_oneDPL
      - main
      - 'release/**'

env:
  BUILD_CONCURRENCY: 2
  TEST_TIMEOUT: 360

jobs:
  clang-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Get clang-format
        run: sudo apt-get install -yqq clang-format-6.0
      - name: Applying clang-format for changed files
        run: |
          FILES=$(git diff --diff-filter=d --name-only ${{ github.event.pull_request.base.sha }} | grep ^include | grep -v nanorange\.hpp\$ || true)
          echo $FILES | xargs -n1 -t -r clang-format-6.0 --style=file -i
      - name: Creating diff
        run: git diff > clang-format-diff.diff
      - name: Checking if diff is empty
        run: if [ -s clang-format-diff.diff ]; then cat clang-format-diff.diff; exit 1; fi

  codespell:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - name: Install prerequisites
        run: |
          sudo apt update && sudo apt install -y codespell
      - name: Run scan
        run: |
          ${GITHUB_WORKSPACE}/.github/scripts/codespell.sh $(pwd)

  documentation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - name: Install prerequisites
        run: |
          echo GITHUB_SHA_SHORT=${GITHUB_SHA::8} >> $GITHUB_ENV
          python -m pip install -r documentation/library_guide/requirements.txt
      - name: Build documentation
        run: |
          mkdir html
          sphinx-build -b html documentation/library_guide/ html/
      - name: Archive build directory
        uses: actions/upload-artifact@v1
        with:
            name: onedpl-html-docs-${{ env.GITHUB_SHA_SHORT }}
            path: html

  linux-testing:
    name: ${{ matrix.os }}_${{ matrix.cxx_compiler }}_backend=${{ matrix.backend }}_device=${{ matrix.device_type }}_cxx${{ matrix.std }}_${{ matrix.build_type }}
    runs-on: ['${{ matrix.os }}']
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            cxx_compiler: dpcpp
            std: 17
            build_type: release
            backend: dpcpp
            device_type: CPU
          - os: ubuntu-20.04
            cxx_compiler: dpcpp
            std: 17
            build_type: release
            backend: tbb
            device_type: HOST
          - os: ubuntu-18.04
            cxx_compiler: g++
            std: 17
            build_type: release
            backend: tbb
            device_type: HOST
          - os: ubuntu-20.04
            cxx_compiler: g++
            std: 11
            build_type: release
            backend: tbb
            device_type: HOST
          - os: ubuntu-20.04
            cxx_compiler: clang++
            std: 17
            build_type: release
            backend: tbb
            device_type: HOST
          - os: ubuntu-18.04
            cxx_compiler: clang++
            std: 11
            build_type: release
            backend: tbb
            device_type: HOST
          - os: ubuntu-20.04
            cxx_compiler: icpx
            std: 17
            build_type: release
            backend: tbb
            device_type: HOST
          - os: ubuntu-20.04
            cxx_compiler: g++
            std: 17
            build_type: release
            backend: serial
            device_type: HOST
    steps:
      - uses: actions/checkout@v2
      - name: Install Intel速 oneAPI Threading Building Blocks (oneTBB)
        run: $CONDA/bin/conda install -c intel tbb-devel
      - name: Install Intel速 oneAPI DPC++/C++ Compiler
        if: matrix.cxx_compiler == 'dpcpp' || matrix.cxx_compiler == 'icpx'
        run: $CONDA/bin/conda install -c intel dpcpp_linux-64
      - name: Run testing
        shell: bash
        run: |
          set -x
          source $CONDA/bin/activate
          export PATH=$CONDA/lib:$PATH
          export CPATH=$CONDA/include:$CPATH
          export OCL_ICD_FILENAMES=$CONDA/lib/libintelocl.so
          if [[ "${{ matrix.cxx_compiler }}" == "dpcpp" ]]; then
            echo "::warning::Compiler: $(dpcpp --version)"
          fi
          if [[ "${{ matrix.backend }}" == "dpcpp" ]]; then
            make_targets="sycl_iterator.pass"
            ctest_flags="-R sycl_iterator.pass"
            echo "::warning::dpcpp backend is set. Compile and run only sycl_iterator.pass"
          fi
          mkdir build && cd build
          cmake -DCMAKE_CXX_STANDARD=${{ matrix.std }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.cxx_compiler }} -DONEDPL_BACKEND=${{ matrix.backend }} -DONEDPL_DEVICE_TYPE=${{ matrix.device_type }} ..
          make VERBOSE=1 -j${BUILD_CONCURRENCY} ${make_targets}
          ctest --timeout ${TEST_TIMEOUT} --output-on-failure ${ctest_flags}

  windows-testing:
    name: ${{ matrix.os }}_${{ matrix.cxx_compiler }}_backend=${{ matrix.backend }}_device=${{ matrix.device_type }}_cxx${{ matrix.std }}_${{ matrix.build_type }}
    runs-on: ['${{ matrix.os }}']
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2019
            cxx_compiler: dpcpp
            std: 17
            build_type: release
            backend: tbb
            device_type: HOST
          - os: windows-2019
            cxx_compiler: cl
            std: 17
            build_type: release
            backend: tbb
            device_type: HOST
          - os: windows-2019
            cxx_compiler: dpcpp
            std: 17
            build_type: release
            backend: dpcpp
            device_type: CPU
    steps:
      - uses: actions/checkout@v2
      - name: Install Intel速 oneAPI Threading Building Blocks (oneTBB)
        shell: cmd
        run: |
          call %CONDA%/condabin/conda.bat activate base
          conda install -c intel tbb-devel
      - name: Install Intel速 oneAPI DPC++/C++ Compiler
        if: matrix.cxx_compiler == 'dpcpp' || matrix.cxx_compiler == 'icx'
        shell: cmd
        run: |
          call %CONDA%/condabin/conda.bat activate base
          conda install -c intel dpcpp_win-64
      - name: Run testing
        shell: cmd
        run: |
          call %CONDA%/condabin/conda.bat activate base
          IF "${{ matrix.backend }}" == "dpcpp" (
            set ninja_targets=sycl_iterator.pass
            set ctest_flags=-R sycl_iterator.pass
            echo ::warning::dpcpp backend is set. Compile and run only sycl_iterator.pass
          )
          IF "${{ matrix.cxx_compiler }}" == "dpcpp" (
            powershell $output = dpcpp --version; Write-Host ::warning::Compiler: $output
            set toolchain_option=-DCMAKE_TOOLCHAIN_FILE=../cmake/windows-dpcpp-toolchain.cmake
          )
          mkdir build && cd build
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
          set INCLUDE=%CONDA_PREFIX%\Library\include;%INCLUDE%
          set LIB=%CONDA_PREFIX%\Library\lib;%LIB%
          set CPATH=%CONDA_PREFIX%\include
          set OCL_ICD_FILENAMES=%CONDA_PREFIX%\Library\lib\intelocl64.dll
          cmake -G "Ninja" %toolchain_option% -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_CXX_STANDARD=${{ matrix.std }} -DCMAKE_CXX_COMPILER=${{ matrix.cxx_compiler }} -DONEDPL_BACKEND=${{ matrix.backend }} -DONEDPL_DEVICE_TYPE=${{ matrix.device_type }} ..
          ninja -j 2 -v %ninja_targets%
          ctest --timeout %TEST_TIMEOUT% -C ${{ matrix.build_type }} --output-on-failure %ctest_flags%
