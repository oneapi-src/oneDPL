name: oneDPL CI

on:
  push:
    branches: [main]
  pull_request:
    branches:
      - release_oneDPL
      - main
      - 'release/**'

env:
  BUILD_CONCURRENCY: 2
  MACOS_BUILD_CONCURRENCY: 3
  TEST_TIMEOUT: 360
  MACOS_ONEAPI_DOWNLOAD_LINK: https://registrationcenter-download.intel.com/akdlm/irc_nas/18358/m_cpp-compiler-classic_p_2022.0.0.62_offline.dmg

jobs:
  clang-format:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get clang-format
        run: sudo apt-get install -yqq clang-format-6.0
      - name: Applying clang-format for changed files
        run: |
          FILES=$(git diff --diff-filter=d --name-only ${{ github.event.pull_request.base.sha }} | grep ^include | grep -v nanorange\.hpp\$ || true)
          echo $FILES | xargs -n1 -t -r clang-format-6.0 --style=file -i
      - name: Creating diff
        run: git diff > clang-format.diff
      - name: Checking if diff is empty
        run: if [ -s clang-format.diff ]; then cat clang-format.diff; exit 1; fi
      - if: failure()
        name: Save artifacts
        uses: actions/upload-artifact@v2
        with:
          name: clang-format-diff
          path: clang-format.diff
          retention-days: 3

  codespell:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      - name: Install prerequisites
        run: |
          sudo apt update && sudo apt install -y codespell
      - name: Run scan
        run: |
          ${GITHUB_WORKSPACE}/.github/scripts/codespell.sh $(pwd)

  documentation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install prerequisites
        run: |
          echo GITHUB_SHA_SHORT=${GITHUB_SHA::8} >> $GITHUB_ENV
          python -m pip install -r documentation/library_guide/requirements.txt
      - name: Build documentation
        run: |
          mkdir html
          sphinx-build -b html documentation/library_guide/ html/
      - name: Archive build directory
        uses: actions/upload-artifact@v1
        with:
            name: onedpl-html-docs-${{ env.GITHUB_SHA_SHORT }}
            path: html

  linux-testing:
    name: ${{ matrix.device_type }},bknd=${{ matrix.backend }},cmplr=${{ matrix.cxx_compiler }},${{ matrix.os }},std=с++${{ matrix.std }},cfg=${{ matrix.build_type }}
    runs-on: ['${{ matrix.os }}']
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            cxx_compiler: icpx
            std: 17
            build_type: release
            backend: dpcpp
            device_type: CPU
          - os: ubuntu-20.04
            cxx_compiler: icpx
            std: 17
            build_type: release
            backend: tbb
            device_type: HOST
          - os: ubuntu-20.04
            cxx_compiler: icpx
            std: 17
            build_type: release
            backend: omp
            device_type: HOST
          - os: ubuntu-latest
            cxx_compiler: g++
            std: 17
            build_type: release
            backend: omp
            device_type: HOST
          - os: ubuntu-latest
            cxx_compiler: g++
            std: 17
            build_type: release
            backend: tbb
            device_type: HOST
          - os: ubuntu-20.04
            cxx_compiler: g++
            std: 17
            build_type: release
            backend: tbb
            device_type: HOST
          - os: ubuntu-20.04
            cxx_compiler: clang++
            std: 17
            build_type: release
            backend: tbb
            device_type: HOST
          - os: ubuntu-20.04
            cxx_compiler: clang++
            std: 17
            build_type: release
            backend: omp
            device_type: HOST
          - os: ubuntu-latest
            cxx_compiler: clang++
            std: 17
            build_type: release
            backend: tbb
            device_type: HOST
          - os: ubuntu-20.04
            cxx_compiler: icpx
            std: 17
            build_type: release
            backend: tbb
            device_type: HOST
          - os: ubuntu-20.04
            cxx_compiler: g++
            std: 17
            build_type: release
            backend: serial
            device_type: HOST
    steps:
      - uses: actions/checkout@v3
      - name: Install Intel® oneAPI Threading Building Blocks (oneTBB)
        run: $CONDA/bin/conda install -c intel tbb-devel
      - name: Install Intel® oneAPI DPC++/C++ Compiler
        if: matrix.cxx_compiler == 'icpx' || matrix.cxx_compiler == 'icx' || matrix.cxx_compiler == 'icx-cl' || matrix.cxx_compiler == 'dpcpp' || matrix.cxx_compiler == 'dpcpp-cl'
        run: $CONDA/bin/conda install -c intel dpcpp_linux-64
      - name: Run testing
        shell: bash
        run: |
          set -x
          source $CONDA/bin/activate
          export PATH=$CONDA/lib:$PATH
          export CPATH=$CONDA/include:$CPATH
          export OCL_ICD_FILENAMES=$CONDA/lib/libintelocl.so
          echo "::warning::Compiler: $(cmake --version)"
          if [[ "${{ matrix.cxx_compiler }}" == "icpx" ]] || [[ "${{ matrix.cxx_compiler }}" == "icx" ]] || [[ "${{ matrix.cxx_compiler }}" == "icx-cl" ]] || [[ "${{ matrix.cxx_compiler }}" == "dpcpp" ]] || [[ "${{ matrix.cxx_compiler }}" == "dpcpp-cl" ]]; then
            echo "::warning::Compiler: $(${{ matrix.cxx_compiler }} --version)"
          fi
          if [[ "${{ matrix.backend }}" == "dpcpp" ]]; then
            make_targets="build-onedpl-sycl_iterator-tests"
            ctest_flags="-R sycl_iterator_.*\.pass"
            echo "::warning::dpcpp backend is set. Compile and run only sycl_iterator tests"
          else
            make_targets="build-onedpl-tests"
          fi
          mkdir build && cd build
          lscpu
          cmake -DCMAKE_CXX_STANDARD=${{ matrix.std }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.cxx_compiler }} -DONEDPL_BACKEND=${{ matrix.backend }} -DONEDPL_DEVICE_TYPE=${{ matrix.device_type }} ..
          make VERBOSE=1 -j${BUILD_CONCURRENCY} ${make_targets}
          ctest --timeout ${TEST_TIMEOUT} --output-on-failure ${ctest_flags}

  windows-testing:
    name: ${{ matrix.device_type }},bknd=${{ matrix.backend }},cmplr=${{ matrix.cxx_compiler }},${{ matrix.os }},std=c++${{ matrix.std }},cfg=${{ matrix.build_type }}
    runs-on: ['${{ matrix.os }}']
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2019
            cxx_compiler: icx-cl
            std: 17
            build_type: release
            backend: tbb
            device_type: HOST
          - os: windows-2019
            cxx_compiler: cl
            std: 17
            build_type: release
            backend: tbb
            device_type: HOST
          - os: windows-2019
            cxx_compiler: icx
            std: 17
            build_type: release
            backend: dpcpp
            device_type: CPU
    steps:
      - uses: actions/checkout@v3
      - name: Install Intel® oneAPI Threading Building Blocks (oneTBB)
        shell: cmd
        run: |
          call %CONDA%/condabin/conda.bat activate base
          conda install -c intel tbb-devel
      - name: Install Intel® oneAPI DPC++/C++ Compiler
        if: matrix.cxx_compiler == 'icpx' || matrix.cxx_compiler == 'icx' || matrix.cxx_compiler == 'icx-cl' || matrix.cxx_compiler == 'dpcpp' || matrix.cxx_compiler == 'dpcpp-cl'
        shell: cmd
        run: |
          call %CONDA%/condabin/conda.bat activate base
          conda install -c intel dpcpp_win-64
      - name: Run testing
        shell: cmd
        run: |
          call %CONDA%/condabin/conda.bat activate base
          powershell $output = cmake --version; Write-Host ::warning::CMake: $output
          if "${{ matrix.backend }}" == "dpcpp" (
            set ninja_targets="build-onedpl-sycl_iterator-tests"
            set ctest_flags=-R sycl_iterator_.*\.pass
            echo ::warning::dpcpp backend is set. Compile and run only sycl_iterator tests
          ) else (
            set ninja_targets=build-onedpl-tests
          )
          if "${{ matrix.cxx_compiler }}" == "icpx" set TMP_INTEL_LLVM_COMPILER=TRUE
          if "${{ matrix.cxx_compiler }}" == "icx" set TMP_INTEL_LLVM_COMPILER=TRUE
          if "${{ matrix.cxx_compiler }}" == "icx-cl" set TMP_INTEL_LLVM_COMPILER=TRUE
          if "${{ matrix.cxx_compiler }}" == "dpcpp" set TMP_INTEL_LLVM_COMPILER=TRUE
          if "${{ matrix.cxx_compiler }}" == "dpcpp-cl" set TMP_INTEL_LLVM_COMPILER=TRUE
          if "%TMP_INTEL_LLVM_COMPILER%" == "TRUE" (
            powershell $output = ${{ matrix.cxx_compiler }} --version; Write-Host ::warning::Compiler: $output
            powershell -Command "(Get-Content '%CONDA_PREFIX%\Library\lib\cl.cfg') -replace 'CL_CONFIG_TBB_DLL_PATH = .*', 'CL_CONFIG_TBB_DLL_PATH = %CONDA_PREFIX%\Library\bin' | Out-File -encoding ASCII -FilePath '%CONDA_PREFIX%\Library\lib\cl.cfg'"
          )
          mkdir build && cd build
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
          set INCLUDE=%CONDA_PREFIX%\Library\include;%INCLUDE%
          set LIB=%CONDA_PREFIX%\Library\lib;%LIB%
          set PATH=%CONDA_PREFIX%\Library\lib;%PATH%
          set CPATH=%CONDA_PREFIX%\include
          set TBB_DLL_PATH=%CONDA_PREFIX%\Library\bin
          reg add HKLM\SOFTWARE\khronos\OpenCL\Vendors /v intelocl64.dll /t REG_DWORD /d 00000000
          cmake -G "Ninja" -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_CXX_STANDARD=${{ matrix.std }} -DCMAKE_CXX_COMPILER=${{ matrix.cxx_compiler }} -DONEDPL_BACKEND=${{ matrix.backend }} -DONEDPL_DEVICE_TYPE=${{ matrix.device_type }} ..
          ninja -j 2 -v %ninja_targets%
          ctest --timeout %TEST_TIMEOUT% -C ${{ matrix.build_type }} --output-on-failure %ctest_flags%

  macos-testing:
    name: HOST,bknd=${{ matrix.backend }},cmplr=${{ matrix.cxx_compiler }},${{ matrix.os }},std=c++${{ matrix.std }},cfg=${{ matrix.build_type }}
    runs-on: ['${{ matrix.os }}']
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-11
            cxx_compiler: icpc
            std: 17
            build_type: release
            backend: omp
    steps:
      - uses: actions/checkout@v3
      - name: Install Intel® oneAPI C++ Compiler Classic and Intel® oneAPI Threading Building Blocks
        run: |
          wget ${MACOS_ONEAPI_DOWNLOAD_LINK}
          mkdir installer
          hdiutil attach -mountpoint ./installer/ m_cpp-compiler*.dmg
          sudo ./installer/bootstrapper.app/Contents/MacOS/install.sh -c --action install --eula accept
      - name: Exclude tests with known issues
        if: matrix.backend == 'omp'
        run: echo "EXCLUDE_FROM_TESTING=transform_binary.pass|transform_unary.pass" >> $GITHUB_ENV
      - name: Run testing
        shell: bash
        run: |
          set -x
          source /opt/intel/oneapi/setvars.sh
          echo "::warning::Compiler: $(cmake --version)"
          if [[ "${{ matrix.cxx_compiler }}" == "icpc" ]]; then
            echo "::warning::Compiler: $(icpc --version)"
          fi
          mkdir build && cd build
          cmake -DCMAKE_CXX_STANDARD=${{ matrix.std }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.cxx_compiler }} -DONEDPL_BACKEND=${{ matrix.backend }} ..
          make VERBOSE=1 build-onedpl-tests -j${MACOS_BUILD_CONCURRENCY}
          ctest --timeout ${TEST_TIMEOUT} --output-on-failure -E "${EXCLUDE_FROM_TESTING}"
